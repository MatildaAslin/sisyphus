#!/usr/bin/perl -w

use strict;
use warnings;
use Test::More qw(no_plan);

use FindBin;                # Find the script location
use lib "$FindBin::Bin/../lib";# Add the script libdir to libs

# Verify module can be included via "use" pragma
BEGIN { use_ok('Molmed::Sisyphus::QStat') };

# Verify module can be included via "require" pragma
require_ok( 'Molmed::Sisyphus::QStat' );

# Test creating a new object without params
my $qstat = Molmed::Sisyphus::QStat->new();
isa_ok($qstat, 'Molmed::Sisyphus::QStat', "New QStat object without params");
# Test creating a new object with params
$qstat = Molmed::Sisyphus::QStat->new(OFFSET=>33,SAMPLING_DENSITY=>1,READ=>1);
isa_ok($qstat, 'Molmed::Sisyphus::QStat', "New QStat object with params");
is($qstat->OFFSET, 33, "Offset set");
is($qstat->READ, 1, "Read set");
is($qstat->SAMPLING_DENSITY, 1, "Sampling density set");

# Test adding datapoints
#                                                                                                                       AGATCGGAAGAGCACACGTC
# Perfect adaptor match (+1:108)
my @seq;
push @seq, 'NTAATCATTTAACCTGGCAGCTAAATGAGAATGTACTGATTTATGTATTTATGTTCCCTTAGTCCATTTTCTTGTTAGCTGCATACTCAGAAAATGCTATATTTTTATAGATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGAT';
# 1 error in adaptor (+1:108)
push @seq, 'NTAATCATTTAACCTGGCAGCTAAATGAGAATGTACTGATTTATGTATTTATGTTCCCTTAGTCCATTTTCTTGTTAGCTGCATACTCAGAAAATGCTATATTTTTATAGATCGGATGAGCACACGTCTGAACTCCAGTCACATCACGAT';
# 2 errors in adaptor (+1:108)
push @seq, 'NTAATCATTTAACCTGGCAGCTAAATGAGAATGTACTGATTTATGTATTTATGTTCCCTTAGTCCATTTTCTTGTTAGCTGCATACTCAGAAAATGCTATATTTTTATAGATCGGATAAGCACACGTCTGAACTCCAGTCACATCACGAT';
# 3 errors in adaptor
push @seq, 'NTAATCATTTAACCTGGCAGCTAAATGAGAATGTACTGATTTATGTATTTATGTTCCCTTAGTCCATTTTCTTGTTAGCTGCATACTCAGAAAATGCTATATTTTTATAGATCGGATAGGCACACGTCTGAACTCCAGTCACATCACGAT';
# 4 errors in adaptor
push @seq, 'NTAATCATTTAACCTGGCAGCTAAATGAGAATGTACTGATTTATGTATTTATGTTCCCTTAGTCCATTTTCTTGTTAGCTGCATACTCAGAAAATGCTATATTTTTATAGATCGGATAGCCACACGTCTGAACTCCAGTCACATCACGAT';
# Perfect adaptor at beginning of seq (+1:0)
push @seq, 'AGATCGGAAGAGCACACGTCCTAAATGAGAATGTACTGATTTATGTATTTATGTTCCCTTAGTCCATTTTCTTGTTAGCTGCATACTCAGAAAATGCTATATTTTTATACAACCGAAGAGCACACGTCTGAACTCCAGTCACATCACGAT';
# Perfect adaptor without first A at beginning of seq (+1:0)
push @seq, 'GATCGGAAGAGCACACGTCCCTAAATGAGAATGTACTGATTTATGTATTTATGTTCCCTTAGTCCATTTTCTTGTTAGCTGCATACTCAGAAAATGCTATATTTTTATACATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGAT';
# Adaptor with 1 mismatch and without A at beginning of seq (+1:0)
push @seq, 'GATCGGATGAGCACACGTCACCTAAATGAGAATGTACTGTTTATGTATTTATGTTCCCTTAGTCCATTTTCTTGTTAGCTGCATACTCAGAAAATGCTATATTTTTATACATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGAT';
# Adaptor with 3 mismatches and without A at beginning of seq
push @seq, 'GATCGGATGAGCGGACGTACCTAAATGAGAATGTACTGATTTATGTATTTATGTTCCCTTAGTCCATTTTCTTGTTAGCTGCATACTCAGAAAATGCTATATTTTTATACATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGAT';
# Adaptor with mismatch in base 3
push @seq, 'NTAATCATTTAACCTGGCAGCTAAATGAGAATGTACTGATTTATGTATTTATGTTCCCTTAGTCCATTTTCTTGTTAGCTGCATACTCAGAAAATGCTATATTTTTATAGTTCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGAT';
# Total 10 seqs
# 3 adapter matches at pos 108
# 3 adapter matches at pos 0

my @qual;
# All Q30
push @qual, '??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????';
# Q30len 44
push @qual, '???>?>??>???>????>?????>??????>???????>????????>?????????>??????????>?????????>????????????>?????????????>????????????????????????????????????????????';
push @qual, '????????????????????????????????????????????>?????????????>????????????>?????????>??????????>?????????>????????>???????>??????>?????>????>???>??>?>???';
push @qual, '>????????>???????>??????>?????>????>???>??>?>????????????????????????????????????????????>?????????????>????????????>?????????>??????????>????????????';
# Q30len 45
push @qual, '????????????????????????????????????????????>?????????????????????????????????????????????>????????>????????>???????>??????>?????>????>???>??>?>??????';
push @qual, 'IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII>I?II??III??I?I?IIII??II?III?III?II?II?I?I?I??>??I?I???>????????>???????>??????>?????>????>???>??>?>I?I???';
push @qual, 'IIIIIIEEEEEEEIIIEIIIIIIEIIIIIIIIIIIEIIIIIIII>I?IIEEIEI??I?E?IIEI??II?III?III?II?II?E?I?E?E>??I?I???>????????>???????>??????>?????>????>???>??>?>I?I???';
# Q30 len 1
push @qual, '?#####################################################################################################################################################';
# Q30 len 2
push @qual, '?###################################################################################################################################################??';
# All  q29
push @qual, '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>';
# Total 10 quals
# 1 length 150
# 3 length 43
# 3 length 44
# 1 length 2
# 1 length 1
# 1 length 0

for(my $i=0; $i<@seq; $i++){
    $qstat->addDataPoint($seq[$i],$qual[$i]);
#    ok($qstat->addDataPoint($seq[$i],$qual[$i]), "Add data point $i");
}
is($qstat->getSequenceCount(), 10, "Sequence count\n");

my $aCount = [(0)x(length($seq[0]))];
$aCount->[0] = 3;
$aCount->[108] = 3;
is_deeply($qstat->getAdapterCounts(), $aCount, "Adapter count\n");

my $qCount = [(undef)x(length($seq[0]))];
$qCount->[0] = 1/@qual;
$qCount->[1] = 1/@qual;
$qCount->[2] = 1/@qual;
$qCount->[44] = 3/@qual;
$qCount->[45] = 3/@qual;
$qCount->[150] = 1/@qual;
is_deeply($qstat->getQ30LengthHist(), $qCount, "Q30length\n");
