#!/usr/bin/perl -w

use FindBin;                # Find the script location
use lib "$FindBin::Bin/lib";# Add the script libdir to libs
use Molmed::Sisyphus::Libpath;

use strict;
use Getopt::Long;
use Pod::Usage;
use File::Basename;

use Molmed::Sisyphus::Common qw(mkpath);
use Molmed::Sisyphus::QStat;
=pod

=head1 NAME

quickReport.pl - Create a brief report and mail it to the specified address

=head1 SYNOPSIS

 quickReport.pl -help|-man
 quickReport.pl -runfolder <runfolder> -mail <email address> [-debug]

=head1 OPTIONS

=over 4

=item -h|-help

prints out a brief help text.

=item -m|-man

Opens the manpage.

=item -runfolder

The runfolder to generate report on.

=item -mail

Send the report to this email address

=item -debug

Print debugging information

=back

=head1 DESCRIPTION

Compiles some quick statistics about the run and sends a mail to the specified address.

=cut

# Parse options
my($help,$man) = (0,0);
my($rfPath,$mail) = (undef,undef);
my $sender = 'seq@medsci.uu.se';
our($debug) = 0;

GetOptions('help|?'=>\$help,
	   'man'=>\$man,
	   'runfolder=s' => \$rfPath,
	   'mail=s' => \$mail,
       'sender=s' => \$sender,
	   'debug' => \$debug,
	  ) or pod2usage(-verbose => 0);
pod2usage(-verbose => 1)  if ($help);
pod2usage(-verbose => 2)  if ($man);

unless(defined $rfPath && -e $rfPath){
    print STDERR "Runfolder not specified or does not exist\n";
    pod2usage(-verbose => 1);
    exit;
}

my $OFFSET = 33;

# Create a new sisyphus object for common functions
my $sisyphus = Molmed::Sisyphus::Common->new(PATH=>$rfPath, DEBUG=>$debug);
$rfPath = $sisyphus->PATH;

# Get the statistics generated by RTA/CASAVA
my($RtaLaneStats,$RtaSampleStats) = $sisyphus->resultStats();

my $sampleSheet = $sisyphus->readSampleSheet();

my %files;
my $baseQC;
sub findFastq{
    my $files = shift;
    my $file = $_;
    if($file !~ /Undetermined_indices/){
        if($file =~ m/\.fastq(\.gz)?$/){
            my @path = split '/', $file;
            my $project = $path[-3];
            $project =~ s/^Project_//;
            my $sample = $path[-2];
            $sample =~ s/^Sample_//;
            if($file =~ m/.*\/(.+)_([ACTG]+-?[ACGT]*)_L(\d{3})_R(\d)_(\d{3})\./){
                $files->{$3}{$1}{$2}{$4}{$5} = $file;
            }
        }
    }
}
use File::Find;
find({wanted => sub{findFastq(\%files)}, no_chdir => 1}, $rfPath);



foreach my $proj (keys %{$sampleSheet}){
    foreach my $lid (keys %{$sampleSheet->{$proj}}){
        foreach my $tag (keys %{$sampleSheet->{$proj}->{$lid}}){
            my $info = $sampleSheet->{$proj}->{$lid}->{$tag};
	    my $laneId = ("0" x (3 - length($lid))) . $lid;
            foreach my $read (keys %{$files{$laneId}{$info->{SampleID}}{$info->{Index}}}){
		foreach my $pctLane (keys %{$files{$laneId}{$info->{SampleID}}{$info->{Index}}{$read}}){
			my $stat = Molmed::Sisyphus::QStat->new(OFFSET=>$OFFSET, DEBUG=>$debug);
			my $filehandle;

			if($files{$laneId}{$info->{SampleID}}{$info->{Index}}{$read}{$pctLane} =~ /fastq.gz$/) {
				open($filehandle, "zcat $files{$laneId}{$info->{SampleID}}{$info->{Index}}{$read}{$pctLane} |") or die "Failed to open $files{$laneId}{$info->{SampleID}}{$info->{Index}}{$read}{$pctLane}: $!";	
			} else {
				open($filehandle,'-|', "grep fastq.gz $files{$laneId}{$info->{SampleID}}{$info->{Index}}{$read}{$pctLane}") or die "Failed to open $files{$laneId}{$info->{SampleID}}{$info->{Index}}{$read}{$pctLane}: $!";
			}

			my $seq = "";
			my $qual = "";

			while(<$filehandle>) {
				$seq = <$filehandle>;
				chomp($seq);
				<$filehandle>;
				$qual = <$filehandle>;
				chomp($qual);
				$stat->addQValuePerBaseAndPosition($seq,$qual);
			}
			close($filehandle);
			$baseQC->{$info->{SampleID}}->{$lid}->{$read}->{$info->{Index}} = $stat->calculateQValuePerBase();
		}
	    }
        }
    }
}

my %laneFrac;
my %laneUnknown;
my $reads;
foreach my $sample (keys %{$RtaSampleStats}){
    foreach my $lane (keys %{$RtaSampleStats->{$sample}}){
	foreach my $barcode (keys %{$RtaSampleStats->{$sample}->{$lane}->{1}}){
	    if($barcode eq 'Undetermined'){
		$laneUnknown{$lane} = sprintf('%.1f', $RtaSampleStats->{$sample}->{$lane}->{1}->{$barcode}->{PctLane});
	    }else{
		push @{$laneFrac{$lane}}, sprintf(' %.1f:%s', $RtaSampleStats->{$sample}->{$lane}->{1}->{$barcode}->{PctLane}, $sample);
		foreach my $read (keys %{$baseQC->{$sample}->{$lane}}) {
			if(!defined($reads->{$lane}->{$read})) {
				$reads->{$lane}->{$read} = ();
			}
			$reads->{$lane}->{$read}->{$sample} = sprintf('%.0f:%.0f:%.0f:%.0f (%.0f:%.0f:%.0f:%.0f)',
				$baseQC->{$sample}->{$lane}->{$read}->{$barcode}->{"a"}->{MEAN},
				$baseQC->{$sample}->{$lane}->{$read}->{$barcode}->{"c"}->{MEAN},
				$baseQC->{$sample}->{$lane}->{$read}->{$barcode}->{"g"}->{MEAN},
				$baseQC->{$sample}->{$lane}->{$read}->{$barcode}->{"t"}->{MEAN},
				$baseQC->{$sample}->{$lane}->{$read}->{$barcode}->{'a'}->{STDV},
				$baseQC->{$sample}->{$lane}->{$read}->{$barcode}->{'c'}->{STDV},
				$baseQC->{$sample}->{$lane}->{$read}->{$barcode}->{'g'}->{STDV},
				$baseQC->{$sample}->{$lane}->{$read}->{$barcode}->{'t'}->{STDV});
		}
	    }
	}
    }
}

open(my $repFh, '>', "$rfPath/quickReport.txt");
print $repFh join("\t", "Lane", "Read", "ReadsPF (M)", "Yield Q30 (G)", "ErrRate", "Excluded", "Q per base (A/C/G/T)", "Sample Fractions", "Unidentified"), "\n";
foreach my $lane (sort {$a<=>$b} keys %{$RtaLaneStats}){
    foreach my $read (sort {$a<=>$b} keys %{$RtaLaneStats->{$lane}}){
	print $repFh join("\t", $lane, $read,
			  sprintf('%.0f', (defined($RtaLaneStats->{$lane}->{$read}->{PF}) ? $RtaLaneStats->{$lane}->{$read}->{PF} : 0)/1e6),
			  sprintf('%.1f', (defined($RtaLaneStats->{$lane}->{$read}->{YieldQ30}) ? $RtaLaneStats->{$lane}->{$read}->{YieldQ30} : 0)/1e9),
			  defined($RtaLaneStats->{$lane}->{$read}->{ErrRate}) ? $RtaLaneStats->{$lane}->{$read}->{ErrRate} : '-',
			  $RtaLaneStats->{$lane}->{$read}->{ExcludedTiles});
	my @fractionSorted = sort({sortLaneFrac($a,$b)} @{$laneFrac{$lane}});

	my $dataString = "";
	foreach my $sampleFrac (@fractionSorted) {
		my ($sampleFrac, $sample) = split(/:/,$sampleFrac);q
		$dataString .= $reads->{$lane}->{$read}->{$sample} . ",";
	}
	$dataString  =~ s/,$//;
	print $repFh "\t" . $dataString;
	print $repFh "\t", join(',', @fractionSorted);
#	if(exists $laneUnknown{$lane}){
	    print $repFh "\t", (defined($laneUnknown{$lane}) ? $laneUnknown{$lane} : '');
#	}
	print $repFh "\n";
    }
}
close($repFh);

if(defined $mail && $mail =~ m/\w\@\w/){
    open(my $repFh, '<', "$rfPath/quickReport.txt");
    my $msg = '<html><body><table>' . "\n";
    my $i=0;
    while(<$repFh>){
	$i++;
	s:\t:</td><td>:g;
	s:,:<br />:g;
	if($i==1){
	    s/td/th/g;
	    $msg .= '<tr><th>' . $_ . '</tr>';
	}elsif($i%2 > 0){
	    $msg .= '<tr><td>' . $_ . '</tr>';
	}else{
	    $msg .= '<tr bgcolor="#dddddd"><td>' . $_ . '</tr>';
	}
    }
    $msg .= '</table>'. "\n";
    $msg .= '</body></html>';

    require Net::SMTP;
    #Create a new object with 'new'.
    my $smtp = Net::SMTP->new("smtp.uu.se");
    #Send the MAIL command to the server.
    $smtp->mail($sender);
    #Send the server the 'Mail To' address.
    $smtp->to($mail);
    #Start the message.
    $smtp->data();
    #Send the message.
    $smtp->datasend("From: $sender\n");
    $smtp->datasend("To: $mail\n");
    $smtp->datasend("Subject: [Sisyphus] [Quick Report]" . basename($rfPath) . "\n");
    $smtp->datasend("MIME-Version: 1.0\n");
    $smtp->datasend("Content-Type: text/html; charset=us-ascii\n");
    $smtp->datasend("\n");
    $smtp->datasend("$msg\n\n");
    #End the message.
    $smtp->dataend();
    #Close the connection to your server.
    $smtp->quit();
}


sub sortLaneFrac{
    my @a = split ':', $_[0];
    my @b = split ':', $_[1];
    return($a[0]<=>$b[0]);
}
